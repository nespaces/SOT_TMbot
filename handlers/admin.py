"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥."""
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
import logging
from config import config
from utils.helpers import is_admin

logger = logging.getLogger(__name__)

# Admin command states
MODERATION_SETTINGS = 1

async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /admin."""
    # End current conversation if any
    return_value = ConversationHandler.END
    if context.user_data.get('conversation_key'):
        del context.user_data['conversation_key']

    # Clear any existing conversation data
    context.user_data.clear()
    context.chat_data.clear()

    # Check if user is admin
    if not await is_admin(update, context):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return ConversationHandler.END

    # Create keyboard for moderation settings
    keyboard = [
        [
            InlineKeyboardButton("–ê–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏—è", callback_data="admin_mod_auto"),
            InlineKeyboardButton("–†—É—á–Ω–∞—è –º–æ–¥–µ—Ä–∞—Ü–∏—è", callback_data="admin_mod_manual")
        ],
        [
            InlineKeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è", callback_data="admin_clear_all")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # Get current moderation type
    current_type = context.bot_data.get('moderation_type', 'manual')
    await update.message.reply_text(
        f"üõ† –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
        f"–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {'–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π' if current_type == 'auto' else '–†—É—á–Ω–æ–π'}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π:",
        reply_markup=reply_markup
    )
    return MODERATION_SETTINGS

async def handle_moderation_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏."""
    query = update.callback_query
    await query.answer()

    # Check if user is admin
    if update.effective_user.id not in config.ADMIN_IDS:
        await query.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return ConversationHandler.END

    try:
        mod_type = query.data.replace('admin_mod_', '')
        if mod_type not in ['auto', 'manual']:
            await query.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.")
            return ConversationHandler.END

        # Save moderation type to context
        context.bot_data['moderation_type'] = mod_type

        # Update message to show current settings
        await query.message.edit_text(
            f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã\n\n"
            f"–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {'–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π' if mod_type == 'auto' else '–†—É—á–Ω–æ–π'}\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫."
        )
        return ConversationHandler.END

    except Exception as e:
        logger.error(f"Error in handle_moderation_settings: {e}")
        await query.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return ConversationHandler.END

async def handle_clear_all_listings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π."""
    query = update.callback_query
    await query.answer()

    if not await is_admin(update, context):
        await query.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        from models.database import session_scope
        from models.listing import Listing
        from sqlalchemy import text

        with session_scope() as session:
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
            session.query(Listing).delete()
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç
            session.execute(text("ALTER SEQUENCE listings_id_seq RESTART WITH 1"))

        await query.message.edit_text(
            "‚úÖ –í—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.\n"
            "–°–ª–µ–¥—É—é—â–µ–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –∏–º–µ—Ç—å ID 1.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        )

    except Exception as e:
        logger.error(f"Error in handle_clear_all_listings: {e}")
        await query.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


async def handle_admin_back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle back button press in admin panel."""
    query = update.callback_query
    await query.answer()

    if not await is_admin(update, context):
        await query.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return ConversationHandler.END

    keyboard = [
        [
            InlineKeyboardButton("–ê–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏—è", callback_data="admin_mod_auto"),
            InlineKeyboardButton("–†—É—á–Ω–∞—è –º–æ–¥–µ—Ä–∞—Ü–∏—è", callback_data="admin_mod_manual")
        ],
        [
            InlineKeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è", callback_data="admin_clear_all")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    current_type = context.bot_data.get('moderation_type', 'manual')
    await query.message.edit_text(
        f"üõ† –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
        f"–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {'–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π' if current_type == 'auto' else '–†—É—á–Ω–æ–π'}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π:",
        reply_markup=reply_markup
    )
    return MODERATION_SETTINGS

from utils.helpers import is_admin